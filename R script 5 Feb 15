###########################   Converts variable types of multiple columns of a dataframe at once
convert.magic <- function(obj, type){
  FUN1 <- switch(type,
                 character = as.character,
                 numeric = as.numeric,
                 factor = as.factor)
  out <- lapply(obj, function(x) FUN1(as.character(x)))
  as.data.frame(out)
}

#' Scores a Folder Full of Single-Category Implicit Association Tests
#' SCIAT.score automates the scoring of a folder full of individual Single-Category Association Test scores. It outputs the D score with split scores for reliability (Greenwald, McGhee, & Schwartz, 1998) and the Information Processing Score (Rebar, Ram, & Conroy, 2014).
#' All you need to run this package is the path file of a folder which only includes .csv files as ouputted from DirectRT (or formatted in the same manner). The name of the files will be used as the id number in the output, so make sure they each have individual names.
#'You will also need to install the R packages: 'plyr', 'VIM', and 'gdata'.
#'Use the function file.choose() if you need to find the path file for the folder with the data (just select a .csv file within the folder for the function and then copy and paste the file path excluding the file name)
#'Data format: Variables needed: 'RT' = response time (in ms), 'Block' = which block it is with 2 & 4 being the compatible and incompatible test trials, respectively), 'Correct' = whether the respondent selected the correct button for each trial (True/TRUE and False/FALSE), 'Trial' = Number of trial; is only used for randomization of the split reliability scores, so it should NOT be the order of the trial because trials should be ordered randomly (so basically it's a random value for each trial between 1-72 for each test block)
#'If there is missing data in the output for an individual, check the original file to make sure it has full data in it (most important is that it has 72 trials for Block 2 and Block 4).
#'@param folder A pathfile of the folder that has all and only the csv files of the SCIAT scores in it, each with individual names
#'@return the D score, D split scores for reliability, and the IP score (v) for each of the SCIATs
#'@export

SCIAT.score <- function(folder){##making list of all files to run##
  setwd(folder) 
  File <- list.files(folder) # import csv-files
  library(plyr)
  SCIATa <- mdply(File, read.csv, as.is=T) ##cutting practice trials - only blocks 2 and 4 are test trials##
  SCIAT <-SCIATa[which(SCIATa$Block==2|SCIATa$Block==4), ]##making variable to identify 2nd and 4th blocks
  SCIAT$Block4 <-ifelse(SCIAT$Block ==4, 1,0)
  SCIAT$Block2 <-ifelse(SCIAT$Block ==2, 1,0)##making a dataset with one row per person
  Subj<-tapply(SCIAT$Subj, SCIAT$Subj,mean)
  Subja<-data.frame(Subj)
  BW<-data.frame(Subj=Subja$Subj) ##cutting (making missing) RT outliers less than 300ms or more than 10000ms##
  SCIAT$rtlow <-ifelse (SCIAT$RT > 299, c(SCIAT$RT), c(NA))
  SCIAT$rtnohi <-ifelse (SCIAT$rtlow < 10000, c(SCIAT$rtlow), c(NA)) ##calculating what percentage of data for each individual was low outliers##
  library(VIM)
  missing <-tapply(SCIAT$rtlow, SCIAT$Subj, countNA)
  missing<-data.frame(missing)
  missing$percLow <-missing$missing/144
  missing$Subj<-BW$Subj
  da2 <- merge(SCIAT,missing,by="Subj") ##cutting the individuals that have more than 10% outliers##
  da2$rtokay <-ifelse(da2$percLow<0.10, c(da2$rtnohi), c(NA)) ##separating data by blocks##
  da2$RT1<-ifelse(da2$Block==2, c(da2$rtokay), c(NA))
  da2$RT2<-ifelse(da2$Block==4, c(da2$rtokay), c(NA)) ##Calculating mean RTs by block, pooled SD, mean difference score, and D-score##
  Mean_RT1<-tapply(da2$RT1,da2$Subj,mean, na.rm=TRUE)
  Mean_RT2<-tapply(da2$RT2, da2$Subj,mean,na.rm = TRUE)
  SD<-tapply(da2$rtokay,da2$Subj,sd, na.rm = TRUE)
  Mean_RT1<-data.frame(Mean_RT1)
  Mean_RT1$Subj<-BW$Subj
  Mean_RT2<-data.frame(Mean_RT2)
  Mean_RT2$Subj<-BW$Subj
  SD<-data.frame(SD)
  SD$Subj<-BW$Subj
  BWda<-merge(Mean_RT1, Mean_RT2, by="Subj")
  BWd<-merge(BWda, SD, by="Subj")
  BWd$Diff<-BWd$Mean_RT2-BWd$Mean_RT1
  BWd$d<-BWd$Diff/BWd$SD#Splitting data to calculate reliability and calculating two split-half D-scores#
  da2$RT11<-ifelse(da2$Trial < 36, c(da2$RT1), c(NA)) 
  da2$RT12<-ifelse(da2$Trial > 36, c(da2$RT1), c(NA))
  da2$RT21<-ifelse(da2$Trial < 36, c(da2$RT2), c(NA))
  da2$RT22<-ifelse(da2$Trial > 36, c(da2$RT2), c(NA))
  Mean_RT11<-tapply(da2$RT11, da2$Subj, mean, na.rm = TRUE)
  Mean_RT12<-tapply(da2$RT12, da2$Subj, mean, na.rm = TRUE)
  Mean_RT21<-tapply(da2$RT21, da2$Subj, mean, na.rm = TRUE)
  Mean_RT22<-tapply(da2$RT22, da2$Subj, mean, na.rm = TRUE)
  SD_RT1<-tapply(da2$RT1, da2$Subj, sd, na.rm = TRUE)
  SD_RT2<-tapply(da2$RT2, da2$Subj, sd, na.rm = TRUE)
  BWreld<-data.frame(BWd$Subj)
  BWreld$Mean_RT11<-Mean_RT11
  BWreld$Mean_RT12<-Mean_RT12
  BWreld$Mean_RT21<-Mean_RT21
  BWreld$Mean_RT22<-Mean_RT22
  BWreld$SD1<-SD_RT1
  BWreld$SD2<-SD_RT2
  BWreld$Diff1<-BWreld$Mean_RT12-BWreld$Mean_RT11
  BWreld$Diff2<-BWreld$Mean_RT22-BWreld$Mean_RT21
  BWreld$relD1<-BWreld$Diff1/BWreld$SD1
  BWreld$relD2<-BWreld$Diff2/BWreld$SD2##merging and cleaning datasets##
  BWreldx<-data.frame(BWd$Subj)
  BWreldx$relD1<-BWreld$relD1
  BWreldx$relD2<-BWreld$relD2
  BWreldx$Subj<-BWd$Subj
  BW<-merge(BWd, BWreldx, by="Subj")
  library(gdata)
  BW<-remove.vars(BW, names="BWd.Subj") #making values for EZ model##using same outlier cuts as in Klauer et al (2007)#
  da2$rtlow2<-ifelse (da2$RT > 100, c(da2$RT), c(NA))
  da2$RT1_EZ<-ifelse(da2$Block==2, c(da2$rtlow2), c(NA))
  da2$RT2_EZ<-ifelse(da2$Block==4, c(da2$rtlow2), c(NA))
   da2$prop<-ifelse(da2$Correct=="False"|da2$Correct=="FALSE", c(1), c(0))
  da2$prop1<-ifelse(da2$Block==2, c(da2$prop), c(NA))
  da2$prop2<-ifelse(da2$Block==4, c(da2$prop), c(NA))
   da2$realSmall<-ifelse(da2$RT < 100, c(1), c(0))
  tooTiny<-tapply(da2$realSmall,da2$Subj, sum, na.rm=TRUE)
  tooTiny<-data.frame(tooTiny)
  tooTiny$Subj<-BW$Subj
  BWx<-merge(BW,tooTiny,by="Subj")
  BW<-BWx
  IQR1<-tapply(da2$RT1_EZ, da2$Subj, IQR, na.rm = TRUE)
  quartiles1<-tapply(da2$RT1_EZ, da2$Subj, quantile, na.rm= TRUE)
  quartiles1x<-as.character(quartiles1)
  quart1xx<-unlist(strsplit(quartiles1x, ","))
  quartiles1x <- matrix(quart1xx, nrow = length(BWx[,1]), ncol=5, byrow=T)
  zoo<-data.frame(quartiles1x)
  zoo$Subj<-BW$Subj
  names(zoo)[2] <- "Q25"
  names(zoo)[4] <- "Q75"
  zoo$Q25<-trim(as.character(zoo$Q25)) ################## remove leading/trailing whitespace to avoid warnings
  zoo$Q75<-trim(as.character(zoo$Q75)) ################## remove leading/trailing whitespace to avoid warnings
  zoo[zoo == "NA"] <- NA ################## recode NAs to avoid warnings
  zoo$Q25<-as.numeric(zoo$Q25)
  zoo$Q75<-as.numeric(zoo$Q75)
  zoo$IQR1<-IQR1
  zoo$Q3and1<-(zoo$Q75+(1.5*zoo$IQR1))
  zoo$Q1and1<-(zoo$Q25-(1.5*zoo$IQR1))
  zoo2<-merge(zoo,da2, by="Subj")
  zoo2$tooBig1<-ifelse(zoo2$RT1_EZ < zoo2$Q3and1, c(0), c(1))
  zoo2$tooLit1<-ifelse(zoo2$RT1_EZ > zoo2$Q1and1, c(0), c(1))
  tooLittle1<-tapply(zoo2$tooLit1,zoo2$Subj,sum, na.rm=TRUE)
  tooBig1<-tapply(zoo2$tooBig1,zoo2$Subj,sum, na.rm=TRUE)
  tooLittle1<-data.frame(tooLittle1)
  tooLittle1$tooBig1<-tooBig1
  tooLittle1$Subj<-BW$Subj
  BWx<-merge(BW, tooLittle1, by="Subj")
  BW<-BWx
  zoo2$rtQ31<-ifelse (zoo2$RT1_EZ < zoo2$Q3and1, c(zoo2$RT1_EZ), c(NA))
  zoo2$RTz1<-ifelse (zoo2$rtQ31 > zoo2$Q1and1, c(zoo2$rtQ31), c(NA))
  zoo2$RTCor1<-ifelse (zoo2$Correct =="True"|zoo2$Correct =="TRUE", c(zoo2$RTz1), c(NA))
  varCor1<-tapply(zoo2$RTCor1,zoo2$Subj,var, na.rm=TRUE)
  prop1a<-tapply(zoo2$prop1, zoo2$Subj, sum,na.rm = TRUE)
  MCor1<-tapply(zoo2$RTCor1,zoo2$Subj,mean, na.rm=TRUE)
  prop1a<-data.frame(prop1a)
  prop1a$Subj<-BW$Subj
  prop1a$prop1b<-prop1a$prop1a/72
  prop1a$prop1<-ifelse(prop1a$prop1b>.01,prop1a$prop1b,(.5/72))
  prop1a$MCor1<-MCor1
  prop1a$varCor1<-varCor1
  BWx<-merge(BW,prop1a,by="Subj")
  BW<-BWx
  BW<-remove.vars(BW,names=c("prop1b","prop1a" ))
  IQR2<-tapply(da2$RT2_EZ, da2$Subj, IQR, na.rm = TRUE)
  quartiles2<-tapply(da2$RT2_EZ, da2$Subj, quantile, na.rm= TRUE)
  quartiles2x<-as.character(quartiles2)
  quart2xx<-unlist(strsplit(quartiles2x, ","))
  quartiles2x <- matrix(quart2xx, nrow = length(BWx[,1]), ncol=5, byrow=T)
  zoox2<-data.frame(quartiles2x)
  zoox2$Subj<-BW$Subj
  names(zoox2)[2] <- "Q25"
  names(zoox2)[4] <- "Q75"
  zoox2$Q25<-as.character(zoox2$Q25)
  zoox2$Q75<-as.character(zoox2$Q75)
  zoox2$Q25<-as.numeric(zoox2$Q25)
  zoox2$Q75<-as.numeric(zoox2$Q75)
  zoox2$IQR2<-IQR2
  zoox2$Q3and1<-(zoox2$Q75+(1.5*zoox2$IQR2))
  zoox2$Q1and1<-(zoox2$Q25-(1.5*zoox2$IQR2))
  zoox222<-merge(zoox2,da2, by="Subj")
  zoox222$tooBig2<-ifelse(zoox222$RT2_EZ < zoox222$Q3and1, c(0), c(1))
  zoox222$tooLit2<-ifelse(zoox222$RT2_EZ > zoox222$Q1and1, c(0), c(1))
  tooLittle2<-tapply(zoox222$tooLit2,zoox222$Subj,sum, na.rm=TRUE)
  tooBig2<-tapply(zoox222$tooBig2,zoox222$Subj,sum, na.rm=TRUE)
  tooLittle2<-data.frame(tooLittle2)
  tooLittle2$tooBig2<-tooBig2
  tooLittle2$Subj<-BW$Subj
  BWx<-merge(BW, tooLittle2, by="Subj")
  BW<-BWx
  zoox222$rtQ31<-ifelse (zoox222$RT2_EZ < zoox222$Q3and1, c(zoox222$RT2_EZ), c(NA))
  zoox222$RTz2<-ifelse (zoox222$rtQ31 > zoox222$Q1and1, c(zoox222$rtQ31), c(NA))
  zoox222$RTCor2<-ifelse (zoox222$Correct =="True"|zoox222$Correct =="TRUE", c(zoox222$RTz2), c(NA))
  varCor2<-tapply(zoox222$RTCor2,zoox222$Subj,var, na.rm=TRUE)
  prop2a<-tapply(zoox222$prop2, zoox222$Subj, sum,na.rm = TRUE)
  MCor2<-tapply(zoox222$RTCor2,zoox222$Subj,mean, na.rm=TRUE)
  prop2a<-data.frame(prop2a)
  prop2a$Subj<-BW$Subj
  prop2a$prop2b<-prop2a$prop2a/72
  prop2a$prop2<-ifelse(prop2a$prop2b>.01,prop2a$prop2b,(.5/72))
  prop2a$MCor2<-MCor2
  prop2a$varCor2<-varCor2
  BWx<-merge(BW,prop2a,by="Subj")
  BW<-BWx
  BW<-remove.vars(BW,names=c("prop2b","prop2a" ))
  BW$s2 = .01# The default value for the scaling parameter s equals .1# If Pc equals 0, .5, or 1, the method will not work, and# an edge-correction is required.
  BW$Pc1 = 1-BW$prop1
  BW$Pc2 = 1-BW$prop2
  BW$VRT1 =varCor1/1000000
  BW$VRT2 =varCor2/1000000
  BW$L1 = qlogis(BW$Pc1)
  BW$L2 = qlogis(BW$Pc2)
  # The function "qlogis" calculates the logit.
  BW$x1 = BW$L1*(BW$L1*BW$Pc1^2 - BW$L1*BW$Pc1 + BW$Pc1 - 0.5)/BW$VRT1
  BW$v1 = sign(BW$Pc1-0.5)*.1*BW$x1^(1/4)
  BW$x2 = BW$L2*(BW$L2*BW$Pc2^2 - BW$L2*BW$Pc2 + BW$Pc2 - 0.5)/BW$VRT2
  BW$v2 = sign(BW$Pc2-0.5)*.1*BW$x2^(1/4)
  # This gives drift rate.
  BW$a1 = BW$s2*qlogis(BW$Pc1)/BW$v1
  BW$a2 = BW$s2*qlogis(BW$Pc2)/BW$v2
  # This gives boundary separation.
  BW$y1 = -1*BW$v1*BW$a1/BW$s2
  BW$y2 = -1*BW$v2*BW$a2/BW$s2
  BW$MRT1 = MCor1/1000
  BW$MRT2 = MCor2/1000
   BW$MDT1 = (BW$a1/(2*BW$v1))*(1-exp(BW$y1))/(1+exp(BW$y1))
  BW$Ter1 = BW$MRT1-BW$MDT1
  BW$MDT2 = (BW$a2/(2*BW$v2))*(1-exp(BW$y2))/(1+exp(BW$y2))
  BW$Ter2 = BW$MRT2-BW$MDT2
   
  
  done<-data.frame("id"=BW$Subj, "d"=BW$d, "reld1"=BW$relD1, "reld2"=BW$relD2,
                   "tooTiny"=BW$tooTiny, "tooLittle"=(BW$tooLittle1+BW$tooLittle2),
                   "tooBig"=(BW$tooBig1+BW$tooBig2),
                    "IP"=(BW$v1-BW$v2))
  
  done <- convert.magic(done, "numeric")  ################## converts data to numeric
  
  row.names(done) <- NULL  ################## changes row numbers in data frame to be 1 to number of rows
  print(done)
}

test <- SCIAT.score("C:/Users/Isaac/Desktop/sciat data/")
